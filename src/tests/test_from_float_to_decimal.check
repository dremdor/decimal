#suite test_from_float_to_decimal

#test float_to_decimal_positive_test
float value = 1.2345;
s21_decimal result = {0};
s21_decimal answer = {{0b00000000000000000011000000111001, 0, 0,
                       0b00000000000001000000000000000000}};  // 1.2345

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
for (int i = 0; i < 4; ++i) {
  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]),
                   sizeof(int));  // Проверка результата
}

#test float_to_decimal_zero_test
float value = 0.0f;
s21_decimal result = {0};
s21_decimal answer = {{0, 0, 0, 0}};  // 0.0

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
for (int i = 0; i < 4; ++i) {
  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]),
                   sizeof(int));  // Проверка результата
}

#test float_to_decimal_zero_minus_test
float value = __FLT_MAX__;
s21_decimal result = {0};

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 1);  // Ошибка конвертации

#test float_to_decimal_small
float value = __FLT_MIN__;
s21_decimal result = {0};
s21_decimal answer = {{0, 0, 0, 0b00000000000111000000000000000000}};

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 0);
for (int i = 0; i < 4; ++i) {
  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]),
                   sizeof(int));  // Проверка результата
}

#test float_to_decimal_edge
float value = 1.23456789E+28f;
s21_decimal result = {0};

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 1);  // Ошибка конвертации

#test float_to_decimal_negative_small
float value = -1.2345;
s21_decimal result = {0};
s21_decimal answer = {{0b00000000000000000011000000111001, 0, 0,
                       0b10000000000001000000000000000000}};  // -1.2345

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
for (int i = 0; i < 4; ++i) {
  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]),
                   sizeof(int));  // Проверка результата
}

#test float_to_decimal_negative_integer
float value = -123.0;
s21_decimal result = {0};
s21_decimal answer = {
    {0b01111011, 0, 0, 0b10000000000000000000000000000000}};  // -123

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
for (int i = 0; i < 4; ++i) {
  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]),
                   sizeof(int));  // Проверка результата
}

// #test float_to_decimal_negative_large_scale
// float value = -0.00001234;
// s21_decimal result = {0};
// s21_decimal answer = {{0, 0, 0b00000000000000000000000000001000,
// 0b10000000000000000000000000000000}};  // -0.00001234

// int res_code = s21_from_float_to_decimal(value, &result);

// ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
// for (int i = 0; i < 4; ++i) {
//  ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]), sizeof(int));  //
//  Проверка результата
// }

// #test float_to_decimal_negative_close_to_zero
// float value = -0.00000001;
// s21_decimal result = {0};
// s21_decimal answer = {{0, 0, 0, 0b10000000000000000000000000000000}};  //
// -0.00000001

// int res_code = s21_from_float_to_decimal(value, &result);

// ck_assert_int_eq(res_code, 0);  // Проверка на отсутствие ошибки
// for (int i = 0; i < 4; ++i) {
//   ck_assert_mem_eq(&(result.bits[i]), &(answer.bits[i]), sizeof(int));  //
//   Проверка результата
// }

#test float_to_decimal_negative_too_large
float value = -FLT_MAX;
s21_decimal result = {0};

int res_code = s21_from_float_to_decimal(value, &result);

ck_assert_int_eq(res_code, 1);  // Ошибка конвертации
